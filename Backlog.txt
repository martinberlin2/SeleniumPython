Backlog.txt
Ideen was mein SE können soll
FEA Feature: neue Fähigkeit 
DEF Defect - z.B. nach Merge eines neuen Features, der in eigenem Branch gefixt werden muss 
DEB Technical Debt - Defect, der erstmal toleriert wird
	DEB für jeden TC einzeln, dernach Merge nicht läuft

FEA ++++ Thema Modell - TC /// Data Driven 
	TC: lädt die Seite selbst (Feature TODO: LoadPage(url) -> Page ist PageObject

!!! Modell-TC : max. mögl. Reporting, Struktur try - catch-block
		dort doku, welche Measures geliefert werden müssen
	TC (ER, params) als Modell TC, Ansteuerung aus Excel
	16.5. Parameter! Keine URL, aber TC(TC_name, ER, params)
		Page oder URL kann ein Parameter sein 
	noch keine Locators, weil das pageObjekte sein müssen
		mehrere Buttons: für einen schreiben, ID's werden Parameter


	TCs müssen nicht numeriert sein

		besser: Typ-Auswertung bei expected
LoadPage(url) -> Page ist PageObject
StubTC (ER, params) für später data driven 
	params als Liste
	Dummy Aktionen 


Serienbrief:
- ein Brief an einen (z.B. Erinnerung Beitrag 10.- seit 1.4.22 )   	== normaler TC()
-> parametrisierter Brief (Adressat, Anrede, Betrag, Seit)  	   	== TC(params)
-> Parametertabelle mit x Zeilen								   	== CSV
-> Programm, das x Briefe erzeugt (Brief, Parametertabelle)			== !! Skript für x Aufrufe erzeugen, 
																		nicht x TCs schreiben
-> Alle Briefe austragen											== alle TCs ausführen

	1. TC normal: TC(): wenn "Button(konkreterLocator1) click und nach 1,3 sek kommt Fenster(konkreterLocator2) da ist, passed"
	bzw. TC() "gib ein Zaehler 10, Nenner 5, erwarte 2"
	
	2. als DD-TC : TC (Loc1, waitSec, Loc2) : wenn "Button(Loc1) click und nach (waitSec) sek kommt Fenster(Loc2) da ist, passed"
	bzw. TC(ER, z,n) ("gib ein Zaehler z, Nenner n, erwarte ER"
	
	Start main: 
	Unterordner "dataDrivenTests", VOR main:
	DDTC - Skriptwriter(csvFileWithPath)
	schreibt aus csvFile TCname - ER - z - n:
	
	3. urspr. TC() ruft dann DD-TC auf 
	DDTC - Skriptwriter(csvFileWithPath)
	schreibt aus csvFile TCname - ER - z - n:
	import TC 
	TC(ER1, z1,n1) --> Reporting, wie normaler TC vorher 
	TC(ER2, z2,n2)
    ...
	und kein Reporting-Aufruf, 
		--- eigenes Feature: zählt selbst mit wieviel Failed und schreibt in DDTC-Report 
	passed, wenn alle Teil-TC passed
	
	
	4. Aufruf: 
++++ Thema Modell - TC /// Data Driven Ende	

DEB	Result-Typ: expected = "123", result = 123 ist fail, wird bei str(result) aber maskiert


FEA wegen mouse-over: Manuell - setzbare TCs 

	
Report - Aufbau: TC-Name dynamisch rein, wird im dyn. TC-Aufruf ermittelt
	Eine Zeile pro Test, 80 Zeichen 
	Reporting: 
- TC-Name zu lang -- TC_5_Scrolling_Elem_Present_not_Visible -- auch mehrzeilig; Max-Längen portabel
- Reason zu lang -- auch mehrzeilig Max-Längen portabel
	

DEB  Reporting:	Laengere_Exception_Texte mit Zeilenumbruch : wenn das mal vorkommt...

Report_AddStats: TC geben Passed, Failed:<otherResult> oder Error<ExceptionText> zurück

FEA deprecated - Messages abfangen

TC_1_2_popup_openPositions: sleep mit isNotVisible- liefert Zeit zurück, notfalls im Text 
	
	
TC_1_2_popup_openPositions: Logging nur Exceptions
ExceptionHandling - was macht try - finally ? auch für catch-block?

Lerndatei, MyCodeExamples


evalTC(3, "len1", execFuncWithExc(lcs, ["abc", "daf"]) ,[1,"a"]) -- geht das in Selenium ?

Cookies gesetzt?

DEB - Returning anpassen:
	TC_1_1_popup_cookies_deny 
	TC_1_title
	TC_2_topline
	TC_4_menuLinksObenSort
- wo sind Exceptions im Report ?  WEG 
- start: driver.close() UND driver.quit()....wozu ?
- Execution List: Folder Execution getrennt von Folder TC-Repo 
  beliebige Reihenfolge 
FEA - Harness für Suiten: Reihenfolge PRIO ! Beispiel: mouse-over, Load Page: Cookies wegklicken

Preconditions, u.a. Blocked TCs einrichten
	Mouse over - Tooltip von title: braucht das 

Manuelle TCs ? User muss Dialog haben um zu bestätigen, dass Tooltip da war
	Mouse over - Tooltip von title
isNotVisible : step berechnen. und isNotVisibleAfterTime
TC bool ---> "Passed " oder reason-String

	addStats-Funktion... welche Measures noch?
DEB Alle TCs laufen für das Reporting --- weg !! DEB für jeden TC einzeln, s.o.
TC_1_1_popup_cookies_deny 
PageObject
	lazy fetch
PageObject als Param in Modell-TC
Eigenentwicklung notVisible(cssSelector, seconds) für Promise-Lösung -->> in LIB
!! Framework / Script muss Exc aus TC abfangen !
  !!! Klasse von Exceptions anzeigen lassen
+ Konfig - Programm
- Framework zur Testausführung, start.py aufräumen

FEA -- Stringvergleich über mehrere Zeilen
FEA Reportname = Report_JJJJ_mmm_tt_hh:mm
FEA Vergleichender Report : mit Vorgänger, bzw. mit letzter Ausführung des TC (also für jeden TC, auch ältere Reports)


weiter
https://selenium-python.readthedocs.io/api.html
-- Elemente ansprechen
find element
	name
	class
	...

-- Actions
	mouse over 
	left click 
	right click
	wait 
	Scrolling
durch website gehen und Aktionen / Elementtypen sammeln
